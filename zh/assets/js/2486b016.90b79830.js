"use strict";(self.webpackChunkcasdoor_website=self.webpackChunkcasdoor_website||[]).push([[9165],{46218:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>n,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>g});var r=o(87462),a=(o(67294),o(3905));o(61839);const i={title:"\u751f\u6210 Swagger \u6587\u4ef6",description:"\u751f\u6210 Swagger \u6587\u4ef6",keywords:["bee","swagger"]},n=void 0,s={unversionedId:"developer-guide/swagger",id:"developer-guide/swagger",title:"\u751f\u6210 Swagger \u6587\u4ef6",description:"\u751f\u6210 Swagger \u6587\u4ef6",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/developer-guide/swagger.md",sourceDirName:"developer-guide",slug:"/developer-guide/swagger",permalink:"/zh/docs/developer-guide/swagger",draft:!1,editUrl:"https://crowdin.com/project/casdoor-website/zh-CN",tags:[],version:"current",frontMatter:{title:"\u751f\u6210 Swagger \u6587\u4ef6",description:"\u751f\u6210 Swagger \u6587\u4ef6",keywords:["bee","swagger"]},sidebar:"tutorialSidebar",previous:{title:"\u524d\u7aef",permalink:"/zh/docs/developer-guide/frontend"},next:{title:"Organizations",permalink:"/zh/docs/category/organizations"}},l={},g=[{value:"\u6982\u8ff0",id:"\u6982\u8ff0",level:2},{value:"\u5982\u4f55\u5199comment",id:"\u5982\u4f55\u5199comment",level:2},{value:"\u5982\u4f55\u751f\u6210swagger\u6587\u4ef6",id:"\u5982\u4f55\u751f\u6210swagger\u6587\u4ef6",level:2}],d={toc:g};function c(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"\u6982\u8ff0"},"\u6982\u8ff0"),(0,a.kt)("p",null,'As we know, beego framework provides support for generateing swagger file in order to clearify the api via the command line tool called "bee". Casdoor is built based on beego too. However, we found that the swagger files generated by bee failed to categorize the apis with "@Tag" label, so we modified the original bee to implement the function.'),(0,a.kt)("h2",{id:"\u5982\u4f55\u5199comment"},"\u5982\u4f55\u5199comment"),(0,a.kt)("p",null,'Most rules are exactly identical to the original bee comment formats, and the only discrepancy is that the api shall be divided into different groups according to the "@Tag" label, therefore developers are obliged to ensure that this tag is correctly added. Here is an example:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// @Title Login\n// @Tag Login API\n// @Description login\n// @Param   oAuthParams     query    string  true        "oAuth parameters"\n// @Param   body    body   RequestForm  true        "Login information"\n// @Success 200 {object} controllers.api_controller.Response The Response object\n// @router /login [post]\nfunc (c *ApiController) Login() {\n')),(0,a.kt)("p",null,'\u5177\u6709\u76f8\u540c"@Tag"\u6807\u7b7e\u7684 api \u5c06\u4f1a\u88ab\u653e\u5165\u540c\u4e00\u4e2a\u7ec4\u3002'),(0,a.kt)("h2",{id:"\u5982\u4f55\u751f\u6210swagger\u6587\u4ef6"},"\u5982\u4f55\u751f\u6210swagger\u6587\u4ef6"),(0,a.kt)("ol",{start:0},(0,a.kt)("li",{parentName:"ol"},"\u4ee5\u6b63\u786e\u7684\u683c\u5f0f\u5199\u5165 api"),(0,a.kt)("li",{parentName:"ol"},"\u83b7\u53d6\u8d44\u6e90\u5e93 ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/casbin/bee"},"https://github.com/casbin/bee")),(0,a.kt)("li",{parentName:"ol"},"\u6784\u5efa\u4fee\u6539\u8fc7\u7684bee\uff0c\u4f8b\u5982\u5728casbin/bee\u7684\u6839\u76ee\u5f55\u4e2d\u8fd0\u884c")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"buid -o mybee\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"\u590d\u5236mybe\u5230casdoor\u7684\u57fa\u7840\u76ee\u5f55"),(0,a.kt)("li",{parentName:"ol"},"\u5728\u8be5\u76ee\u5f55\u4e2d\u8fd0\u884c")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mybee generate docs\n")),(0,a.kt)("p",null,"\u4e4b\u540e\u4f60\u4f1a\u53d1\u73b0\u751f\u6210\u65b0\u7684swagger\u6587\u4ef6\u3002"))}c.isMDXComponent=!0}}]);